---
- name: Check kubectl version
  shell: kubectl version --client -o json
  register: _kubectl_version
  changed_when: _kubectl_version.rc != 0
  failed_when: false
  ignore_errors: true
  when: kubectl_install

- name: Check if kubectl version matches
  set_fact:
    _kubectl_version_matches: "{{ (_kubectl_version.stdout|from_json).clientVersion.gitVersion == ('v' + kubectl_version) }}"
  when:
    - kubectl_install
    - _kubectl_version is not changed

- name: Determine if and how kubectl needs to be installed
  set_fact:
    _kubectl_use_repo: "{{ kubectl_use_repo and ansible_os_family|lower == 'debian' }}"
    _kubectl_install: "{{ kubectl_install and (_kubectl_version is changed or not _kubectl_version_matches|d(false)) }}"
  when: kubectl_install

- name: Install via download
  when:
    - _kubectl_install
    - not _kubectl_use_repo
  block:
    - name: Check if already downloaded
      stat:
        path: "{{ kubectl_download_path }}"
      register: _kubectl_check

    - name: Download kubectl v{{ kubectl_version }}
      get_url:
        url: "{{ kubectl_download_url }}"
        dest: "{{ kubectl_download_path }}"
        mode: 0755
        checksum: "{{ kubectl_checksum[ansible_system | lower] }}"
      when: not _kubectl_check.stat.exists

    - name: Link kubectl
      file:
        state: link
        src: "{{ kubectl_download_path }}"
        dest: "{{ kubectl_link_path }}"
      when: kubectl_link

- name: Install via repo
  when:
    - _kubectl_install
    - _kubectl_use_repo
  block:
    - name: Install apt key
      apt_key:
        url: "{{ kubectl_apt_key_url }}"
        state: present

    - name: Configure apt repo
      apt_repository:
        repo: "{{ kubectl_apt_repo }}"
        state: present

    - name: Install kubectl v{{ kubectl_version }} from repo
      apt:
        name: kubectl={{ kubectl_version }}-*
        state: present
